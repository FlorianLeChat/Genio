{% extends 'base.html.twig' %}
{% block content %}
    <h1>{{ personne.nom }} {{ personne.prenom }}</h1>

    <p>Date de naissance : {{ personne.dateNaissance|date('d/m/Y') }}</p>

    {% if personne.dateDeces is not null %}
        <p>Date de décès : {{ personne.dateDeces|date('d/m/Y') }}</p>
    {% endif %}

	<h2>Conjoint(e)</h2>
	{% if conjoint != false %}
		<p><strong>{{ conjoint.nom }} {{ conjoint.prenom }}, </strong> Date de naissance: {{ conjoint.date_naissance|date('d/m/Y') }} 
		{% if personne.dateDeces is not null %}
        	<p>Date de décès : {{ conjoint.dateDeces|date('d/m/Y') }}</p>
		{% endif %}
    {% endif %}

	{% if conjoint == false %}
		<p>Pas de conjoint(e) trouvé(e)</p>
	{% endif %}

	<h2>Enfant(s)</h2>
	{% if children != false %}
		<ul>
			{% if children is iterable %}
				{% for child in children %}
					<li>{{ child.nom }} {{ child.prenom }} ({{ child.sexe }})</li>
				{% endfor %}
			{% else %}
				<li>{{ children.nom }} {{ children.prenom }} ({{ children.sexe }})</li>
			{% endif %}
		</ul>
	{% endif %}
	{% if children == false %}
		<p>Pas d'enfants trouvés</p>
	{% endif %}

	<h2>Fratrie(s)</h2>
	{% if siblings != false %}
		<ul>
			{% if siblings is iterable %}
				{% for sibling in siblings %}
					<li>{{ sibling.nom }} {{ sibling.prenom }} ({{ sibling.sexe }})</li>
				{% endfor %}
			{% else %}
				<li>{{ siblings.nom }} {{ siblings.prenom }} ({{ siblings.sexe }})</li>
			{% endif %}
		</ul>
	{% endif %}

	{% if siblings == false %}
		<p>Pas de fratries trouvés</p>
	{% endif %}


    <h2>Ancêtres</h2>

	<ul>
		{# Fonction pour afficher les parents d'une personne #}
		{% macro displayParents(ancestors, personId, originId) %}
			{% set person = ancestors|filter(v => v.id == personId)|first %}
			{# On vérifie que la personne existe bien #}
			
			{% if person is not null %}
				{# On affiche l'origine de l'arbre uniquement pour la personne recherchée #}
				{% if person.id == originId %}
					<li>
						{{ person.nom }} {{ person.prenom }} ({{ person.sexe }})

						<em>({{ person.date_naissance }})</em>
					</li>
				{% endif %}

				{# Récupération de l'identifiant unique du père et de ses informations (si disponible) #}
				{% set fatherId = ancestors|filter(v => v.personne2_id == person.id and v.relation_type_id == 1)|first %}
				{% set fatherData = null %}
				{% if fatherId is iterable %}
					{% set fatherData = ancestors|filter(v => v.id == fatherId.personne1_id)|first %}
				{% endif %}

				{# Récupération de l'identifiant unique de la mère et de ses informations (si disponible) #}
				{% set motherId = ancestors|filter(v => v.personne2_id == person.id and v.relation_type_id == 2)|first %}
				{% set motherData = null %}
				{% if motherId is iterable %}
					{% set motherData = ancestors|filter(v => v.id == motherId.personne1_id)|first %}
				{% endif %}

				<ul>
					{% if fatherData is not null %}
						{# Affichage des informations du père #}
						<li>
							<strong>Père</strong>

							{{ fatherData.nom }} {{ fatherData.prenom }} ({{ fatherData.sexe }})

							<em>({{ fatherData.date_naissance }})</em>
						</li>

						{# Appel récursif de la fonction pour afficher les parents du père #}
						{{ _self.displayParents(ancestors, fatherData.id) }}
					{% endif %}

					{% if motherData is not null %}
						{# Affichage des informations de la mère #}
						<li>
							<strong>Mère</strong>

							{{ motherData.nom }} {{ motherData.prenom }} ({{ motherData.sexe }})

							<em>({{ motherData.date_naissance }})</em>
						</li>

						{# Appel récursif de la fonction pour afficher les parents de la mère #}
						{{ _self.displayParents(ancestors, motherData.id) }}
					{% endif %}
				</ul>
			{% endif %}
		{% endmacro %}

		{# Appel initial de la fonction pour la personne recherchée #}
		{{ _self.displayParents(ancestors, originId, originId) }}
	</ul>

	{# Si on est connecté, on devrait pouvoir editer notre arbre #}
	{% if user is not null %}
		<button><a href="{{ path('app_edit_tree')}}">Editer votre arbre</a></button>
	{% endif %}
{% endblock %}